HTTPS는 대칭키 암호화 방식 + 비대칭키 암호화 방식을 사용

대칭키 암호화
클라이언트와 서버가 동일한 키를 사용해 암호화/복호화 진행함
키가 노출되면 매우 위험하지만 연산 속도가 빠름

비대칭키 암호화
1개의 쌍으로 구성된 공개키와 개인키를 암호화/복호화 하는데 사용
키가 노출되어도 안전하지만 연산속도가 느림

공개키 / 개인키 암호화 방식을 사용해 데이터를 암호화 한다.

공개키 -> 모두에게 공개가능한 키
개인키 -> 나만 가지고 알고 있어야 하는 키

공개키 암호화 -> 개인키로만 복호화할 수 있다. 즉 개인키는 나만
가지고 있음으로, 나만 볼 수 있다.

개인키 암호화 -> 공개키로만 복호화할 수 있다. 즉 공개키는 모두
에게 공개되어 있으므로,  내가 인증한 정보임을 알려 신뢰성 증가


HTTPS 동작 과정
대칭키 암호와 , 비대칭키 암호화를 모두 사용하여 빠른 연산속도
+ 안정성을 얻고 있다.

세션키는 주고 받는 데이터를 암호화 하기 위한 대칭키이다.
(데이터 교환간 빠른 연산이 필요)

하지만 이 세션키를 클라이언트와 서버가 교환할 때에는 비대칭키
가 사용된다.

즉 처음 연결을 성립하여 안전하게 세션키를 공유하는 과정에서
비대칭키가 사용되고 , 이후에 데이터를 교환하는 과정에서
빠른 연산속도를 위해 대칭키가 사용된다.

실제 HTTPS 연결 과정

1.클라이언트(브라우저)가 서버로 최초 연결 시도를 함
2.서버는 공개키(인증서)를 브라우저에게 넘겨줌
3.브라우저는 인증서의 유효성을 검사하고 세션키를 발급함
4.브라우저는 세션키를 보관하며 추가로 서버의 공개키로 세션키를
암호화하여 서버로 전송한다.
5.서버는 개인키로 암호화된 세션키를 복호화하여 세션키를 얻음
6.클라이언트와 서버는 동일한 세션키를 공유하므로 데이터를 전달
할 때 세션키로 암호화/복호화를 진행함

서버가 비대칭키를 발급받는 과정

서버는 클라이언트와 세션키를 공유하기 위한 공개키를 생성한다.
일반적으로 인증된 기관에 공개키를 전송하여 인증서를 발급받음

A기업은 HTTP 기반의 애플리케이션에 HTTPS를 적용하기 위해
공개키/개인키를 발급함

CA 기업에게 돈을 지불하고, 공개키를 저장하는 인증서의 발급을 요청함

CA 기업은 CA기업의 이름, 서버의 공개키, 서버의 정보 등을 기반으로
인증서를 생성하고, CA 기업의 개인키로 암호화하여 A기업에게 이를 제공함

A기업은 클라이언트에게 암호화된 인증서를 제공함

브라우저는 CA기업의 공개키를 미리 다운받아 갖고 있어,
암호화된 인증서를 복호화함

암호화된 인증서를 복호화하여 얻은 A기업의 공개키로 세션키를 공유함

<HTTP 와 HTTPS>

HTTP는 암호화가 추가되지 않았기 때문에 보안에 취약한 반면,
HTTPS는 안전하게 데이터를 주고받을 수 있다.
하지만 HTTPS를 이용하면 암호화/복호화의 과정이 필요하기 때문에
HTTP보다 속도가 느리다. (물론 오늘날에는 거의 차이를 못느낄 정도이다.)
또한 HTTPS는 인증서를 발급하고 유지하기 위한 추가 비용이 발생하다.
그렇다면 언제 HTTP를 쓰고, 언제 HTTPS를 쓰는 것이 좋겠는가?
개인 정보와 같은 민감한 데이터를 주고 받아야 한다면 HTTPS를 이용해야 하지만, 노출이 되어도 괜찮은 단순한 정보 조회 등 만을 처리하고 있다면 HTTP를 이용하면 된다.

